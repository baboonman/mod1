#version 330 core
#define M_PI 3.1415926535897932384626433832795

//uniform mat4 MVP;
uniform mat4 P;
uniform mat4 V;
uniform mat4 M;

in vec3 in_Position;
in vec3 in_VertexN;

out vec3 fragVert;
//out vec3 fragNormal;
out vec3 normal;
out vec3 fragColor;

float snoise(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 waterRing(vec3 pos, vec3 n, float a, float b) {
	float	x = a * sin(M_PI / b);
	mat4	tr = mat4( vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(n * x, 1.0) );
	return vec3( tr * vec4(pos, 0.0) );
}

void main() {
	fragVert = in_Position;
	fragNormal = in_VertexN;

    mat3 normalMatrix = transpose(inverse(mat3(M)));
    normal = normalize(normalMatrix * fragNormal);

	fragVert  = vec3(M * vec4(fragVert, 1));

//	float n = snoise(vec2(in_Position.x, in_Position.y));
	float n = 0.2 * sin(M_PI / 20);
//	fragColor = vec3(((in_Position.x ) / 2 + n) / 2 , ((in_Position.y + 1) / 2 + n) / 2 , ((in_Position.z + 1) / 2 + n) / 2 );

	fragVert = waterRing(in_Position, in_VertexN, 0.2, 20);
	fragColor = vec3( (0.027 + n) / 2 , (0.651 + n) / 2 , (0.859 + n) / 2 );

//	gl_Position = MVP * vec4(in_Position, 1.0);

	gl_Position = MVP * vec4(fragVert, 1.0);
}
